/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package mraa;

public class mraa {
  public static Result init() {
    return Result.swigToEnum(mraaJNI.init());
  }

  public static String getVersion() {
    return mraaJNI.getVersion();
  }

  public static int setPriority(int priority) {
    return mraaJNI.setPriority(priority);
  }

  public static Platform getPlatformType() {
    return Platform.swigToEnum(mraaJNI.getPlatformType());
  }

  public static void printError(Result result) {
    mraaJNI.printError(result.swigValue());
  }

  public static boolean pinModeTest(int pin, Pinmodes mode) {
    return mraaJNI.pinModeTest(pin, mode.swigValue());
  }

  public static long adcRawBits() {
    return mraaJNI.adcRawBits();
  }

  public static long adcSupportedBits() {
    return mraaJNI.adcSupportedBits();
  }

  public static String getPlatformName() {
    return mraaJNI.getPlatformName();
  }

  public static String getPlatformVersion(int platform_offset) {
    return mraaJNI.getPlatformVersion__SWIG_0(platform_offset);
  }

  public static String getPlatformVersion() {
    return mraaJNI.getPlatformVersion__SWIG_1();
  }

  public static long getPinCount() {
    return mraaJNI.getPinCount();
  }

  public static int getI2cBusCount() {
    return mraaJNI.getI2cBusCount();
  }

  public static int getI2cBusId(int i2c_bus) {
    return mraaJNI.getI2cBusId(i2c_bus);
  }

  public static String getPinName(int pin) {
    return mraaJNI.getPinName(pin);
  }

  public static int getGpioLookup(String pin_name) {
    return mraaJNI.getGpioLookup(pin_name);
  }

  public static int getI2cLookup(String i2c_name) {
    return mraaJNI.getI2cLookup(i2c_name);
  }

  public static int getSpiLookup(String spi_name) {
    return mraaJNI.getSpiLookup(spi_name);
  }

  public static int getPwmLookup(String pwm_name) {
    return mraaJNI.getPwmLookup(pwm_name);
  }

  public static Result setLogLevel(int level) {
    return Result.swigToEnum(mraaJNI.setLogLevel(level));
  }

  public static boolean hasSubPlatform() {
    return mraaJNI.hasSubPlatform();
  }

  public static boolean isSubPlatformId(int pin_or_bus_id) {
    return mraaJNI.isSubPlatformId(pin_or_bus_id);
  }

  public static int getSubPlatformId(int pin_or_bus_index) {
    return mraaJNI.getSubPlatformId(pin_or_bus_index);
  }

  public static int getSubPlatformIndex(int pin_or_bus_id) {
    return mraaJNI.getSubPlatformIndex(pin_or_bus_id);
  }

  public static int getDefaultI2cBus(int platform_offset) {
    return mraaJNI.getDefaultI2cBus__SWIG_0(platform_offset);
  }

  public static int getDefaultI2cBus() {
    return mraaJNI.getDefaultI2cBus__SWIG_1();
  }

  public static Result addSubplatform(Platform subplatformtype, String uart_dev) {
    return Result.swigToEnum(mraaJNI.addSubplatform(subplatformtype.swigValue(), uart_dev));
  }

  public static Result removeSubplatform(Platform subplatformtype) {
    return Result.swigToEnum(mraaJNI.removeSubplatform(subplatformtype.swigValue()));
  }

  public static Result initJsonPlatform(String path) {
    return Result.swigToEnum(mraaJNI.initJsonPlatform(path));
  }

  public static Gpio gpioFromDesc(String desc) {
    long cPtr = mraaJNI.gpioFromDesc(desc);
    return (cPtr == 0) ? null : new Gpio(cPtr, false);
  }

  public static Aio aioFromDesc(String desc) {
    long cPtr = mraaJNI.aioFromDesc(desc);
    return (cPtr == 0) ? null : new Aio(cPtr, false);
  }

  public static Uart uartFromDesc(String desc) {
    long cPtr = mraaJNI.uartFromDesc(desc);
    return (cPtr == 0) ? null : new Uart(cPtr, false);
  }

  public static Spi spiFromDesc(String desc) {
    long cPtr = mraaJNI.spiFromDesc(desc);
    return (cPtr == 0) ? null : new Spi(cPtr, false);
  }

  public static I2c i2cFromDesc(String desc) {
    long cPtr = mraaJNI.i2cFromDesc(desc);
    return (cPtr == 0) ? null : new I2c(cPtr, false);
  }

  public static Pwm pwmFromDesc(String desc) {
    long cPtr = mraaJNI.pwmFromDesc(desc);
    return (cPtr == 0) ? null : new Pwm(cPtr, false);
  }

}
